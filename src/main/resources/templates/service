package {{packageName}}.service;

import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.stereotype.Service;

import {{packageName}}.entity.{{ClassName}};
import {{packageName}}.repository.{{ClassName}}Repository;

import {{packageName}}.entity.*;


/**
 * This class {{ClassName}} provides services to access the repository.
 *
 * <p>
 * Service Class that provides the implementations for the {{ClassName}}Service API
 * Methods with the help of the {{ClassName}}Repository.
 * </p>
 *
 */
@Service
public class {{ClassName}}Service{

	private static final Logger logger = LoggerFactory.getLogger({{ClassName}}Service.class);
	
	
	private final {{ClassName}}Repository {{className}}Repository;

		
	
	/**
	 * Paramaterized constructor
	 */
	public {{ClassName}}Service({{ClassName}}Repository {{className}}Repository) {
		this.{{className}}Repository = {{className}}Repository;
	}
	
	/**
	 * This method is used to save the entity resource.
	 * 
	 * @return {{ClassName}}
	 */
	 public {{ClassName}} save{{ClassName}}({{ClassName}} {{className}}){	
		
		if(logger.isInfoEnabled()) {
			logger.info(" save resource {}",{{className}});
		}
		return {{className}}Repository.save({{className}});
	}
	
	
	/**
	 * This method is used to get the resource based on resource identity.
	 * 
	 * @return  {{ClassName}} entity
	 */	
	public {{ClassName}} getBy{{SerializableParamName}}({{serializableType}} param){		
		
		if(logger.isInfoEnabled()) {
			logger.info(" get resource with id {}",param);
		}
		return {{className}}Repository.findById(param);
	}
	
	
	/**
	 * This method is used to get all the resources.
	 * 
	 * @return list of {{ClassName}} entities
	 */	
	public List<{{ClassName}}> getAll{{ClassName}}(){		
		
		if(logger.isInfoEnabled()) {
			logger.info(" get all the resources");
		}
		return {{className}}Repository.findAll();
	}
	
	/**
	 * This method is used to delete the resource based on resource object.
	 * 
	 * 
	 */	
	public void delete{{ClassName}}({{ClassName}} {{className}}){		
		
		{{className}}Repository.delete({{className}});
	}
	
	
{{#properties}}
 {{^primaryKey}}
	public List<{{ClassName}}> getBy{{PropertyName}}({{type}} {{propertyName}}){		
		
		return {{className}}Repository.findBy{{PropertyName}}({{propertyName}});
	}
 {{/primaryKey}}	
{{/properties}}
	

	
}
