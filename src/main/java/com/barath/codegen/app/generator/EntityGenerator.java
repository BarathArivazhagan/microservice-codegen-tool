package com.barath.codegen.app.generator;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;

import com.barath.codegen.app.model.CodeGenEntity;
import com.barath.codegen.app.util.JacksonUtils;
import com.barath.codegen.app.util.PropertyResolverUtility;
import com.barath.codegen.app.model.CodeGenEntityProperty;





@Component
public class EntityGenerator extends BaseGenerator {
	
		
	@SuppressWarnings("unchecked")
	public List<Map<String,Object>> buildEntities(File target,Map<String,Object> input){
		
		System.out.println(" input "+input);
		Map<String,CodeGenEntity> entities=(Map<String, CodeGenEntity>) input.get("entities");
		System.out.println("entites   === > "+entities);
		List<Map<String,Object>> models=new ArrayList<>();
		
		String packageName=(String) input.get("packageName");		
		String baseDir=(String) input.get("baseDir");	
		entities.entrySet().forEach( entry -> {

			String entityName=entry.getKey();
			Map<String,Object> codeGenEntityMap=(Map<String, Object>) entry.getValue();
			Map<String,Object> entityMap=new HashMap<>();
			Map<String,CodeGenEntityProperty> propertyMap=(Map<String, CodeGenEntityProperty>) codeGenEntityMap.get("properties");
			
			entityMap.put("isEntity", true);
			entityMap.put("packageName",packageName );
			entityMap.put("className",StringUtils.uncapitalize(entityName));
			entityMap.put("ClassName",StringUtils.capitalize(entityName));
			entityMap.put("tableName", entityName);
			entityMap.put("baseDir", baseDir);
			List<Map<String,Object>> propertyList=new ArrayList<>();
			propertyMap.entrySet().forEach( propEntry -> {

				String propertyName=propEntry.getKey();
				CodeGenEntityProperty codeGenEntityProperty = new CodeGenEntityProperty();
				try {
					String json=JacksonUtils.getObjectMapper().writeValueAsString(propEntry.getValue());
					System.out.println("JSON "+json);
					codeGenEntityProperty = JacksonUtils.getObjectMapper().readValue(json, CodeGenEntityProperty.class);
				} catch (IOException e) {
					
					e.printStackTrace();
				}
				Map<String,Object> properties=new HashMap<>();
				properties.put("propertyName", StringUtils.uncapitalize(propertyName));
				properties.put("PropertyName", StringUtils.capitalize(propertyName));
				properties.put("type",codeGenEntityProperty.getType() );
				properties.put("primaryKey", codeGenEntityProperty.isPrimaryKey());
				if(codeGenEntityProperty.isPrimaryKey()){
					entityMap.put("serializableType", codeGenEntityProperty.getType());
					entityMap.put("serializableParamName", StringUtils.uncapitalize(propertyName));
					entityMap.put("SerializableParamName", StringUtils.capitalize(propertyName));
					entityMap.put("serializableParamNameWithEscape", "{".concat(StringUtils.uncapitalize(propertyName).concat("}")));
				}
				System.out.println("--------"+codeGenEntityProperty.getJoinColumn());				
				properties.put("isAutoGenerated", codeGenEntityProperty.isAutoGenerated());
				properties.put("generatorType", codeGenEntityProperty.getGenerationType());
				properties.put("isMap", codeGenEntityProperty.isMap());
				properties.put("isList", codeGenEntityProperty.isList());
				properties.put("isSet", codeGenEntityProperty.isSet());
				boolean isBasicType =(codeGenEntityProperty.isMap()  || codeGenEntityProperty.isList()  || codeGenEntityProperty.isSet() ) ? false:true;
				properties.put("isBasicType", isBasicType);
				properties.put("joinColumn", codeGenEntityProperty.getJoinColumn());
				properties.put("mappedBy", codeGenEntityProperty.getMappedBy());
				
				Map<String,Object> relationDetails=codeGenEntityProperty.getRelation();
				if(relationDetails !=null && !relationDetails.isEmpty()){
					relationDetails.put(PropertyResolverUtility.resolveRelationType((String)relationDetails.get("type")),true);
					relationDetails.put("cascadeTypes",PropertyResolverUtility.resolveCascadeTypes((String)relationDetails.get("cascadeTypes")));
					relationDetails.put("fetchType",PropertyResolverUtility.resolveFetchTypes((String)relationDetails.get("fetchType")));
					properties.put("relation", relationDetails);					
				}
				propertyList.add(properties);
				
			});
			entityMap.put("properties", propertyList);
			entityMap.put("isCrud", false);	 
			entityMap.put("isJpa", true);
			models.add(entityMap);			
			
		});
		System.out.println("models "+models);
		
		return models;
		

	}
	
	public void writeEntities(File target,List<Map<String,Object>> input){
		
		
		input.stream().forEach( map -> {
			
			String packageName=(String) map.get("packageName");
			String baseDir=(String) map.get("baseDir");	
			String className=(String)map.get("ClassName");
			File entityFile = new File(target,baseDir+"/src/main/java/"+packageName.replace('.', '/')+"/entity");
			entityFile.mkdir();
			write(new File(entityFile,className.concat(".java")),"entity", map);
		});
		
		
	}

}
